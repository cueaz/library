name: Build and push images (mlflow)

on:
  push:
    branches:
      - main
    paths:
      - mlflow/**
  schedule:
    - cron: 0 */24 * * *
  workflow_dispatch:

concurrency:
  group: mlflow
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: mlflow
  PLATFORMS: linux/amd64,linux/arm64
  DEBIAN_VERSION: 12
  DEBIAN_RELEASE: bookworm

jobs:
  vars:
    runs-on: ubuntu-latest

    steps:
      # ref: https://github.com/orgs/community/discussions/26279#discussioncomment-10658026
      - name: Check if latest version exists on the registry
        run: |
          set -eux
          MLFLOW_VERSION="$(curl -s https://pypi.org/pypi/mlflow/json | jq -r '.info.version')"
          echo "MLFLOW_VERSION=$MLFLOW_VERSION" >> $GITHUB_ENV
          EXPECTED_TAG="$MLFLOW_VERSION-debian${{ env.DEBIAN_VERSION }}"
          ENCODED_TOKEN="$(echo -n "${{ secrets.GITHUB_TOKEN }}" | base64)"
          TAG_EXISTS="$(curl -s -H "Authorization: Bearer ${ENCODED_TOKEN}" "https://${{ env.REGISTRY }}/v2/${{ github.actor }}/${{ env.IMAGE_NAME }}/tags/list" | jq -r --arg TAG "$EXPECTED_TAG" '.tags[] | select(. == $TAG)')"
          if [[ -n "$TAG_EXISTS" ]]; then
            echo "TAG_EXISTS=true"  >> $GITHUB_ENV
          else
            echo "TAG_EXISTS=false" >> $GITHUB_ENV
          fi

    outputs:
      tag_exists: ${{ env.TAG_EXISTS }}
      tag_base: ${{ env.REGISTRY }}/${{ github.actor }}/${{ env.IMAGE_NAME }}
      tag_end1: ${{ env.MLFLOW_VERSION }}
      tag_end2: ${{ env.MLFLOW_VERSION }}-debian${{ env.DEBIAN_VERSION }}
      context: "{{defaultContext}}:${{ env.IMAGE_NAME }}"
      labels: |
        org.opencontainers.image.source=${{ github.event.repository.html_url }}
        org.opencontainers.image.description=${{ github.event.repository.description }}
        org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}
        org.opencontainers.image.revision=${{ github.sha }}
      build_args: |
        MLFLOW_VERSION=${{ env.MLFLOW_VERSION }}
        DEBIAN_VERSION=${{ env.DEBIAN_VERSION }}
        DEBIAN_RELEASE=${{ env.DEBIAN_RELEASE }}

  build-and-push-images:
    runs-on: ubuntu-latest
    needs: vars
    if: ${{ needs.vars.outputs.tag_exists == 'false' }}

    permissions:
      contents: read
      packages: write

    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: ${{ needs.vars.outputs.context }}
          build-args: ${{ needs.vars.outputs.build_args }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: ${{ env.PLATFORMS }}
          push: true
          provenance: false
          labels: ${{ needs.vars.outputs.labels }}
          tags: |
            ${{ needs.vars.outputs.tag_base }}
            ${{ needs.vars.outputs.tag_base }}:${{ needs.vars.outputs.tag_end1 }}
            ${{ needs.vars.outputs.tag_base }}:${{ needs.vars.outputs.tag_end2 }}
