name: Build and push images (mlflow)

on:
  push:
    branches:
      - main
    paths:
      - mlflow/**
  workflow_dispatch:

concurrency:
  group: mlflow
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: mlflow
  PLATFORMS: linux/amd64,linux/arm64

jobs:
  vars:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5
      - run: |
          set -eux
          MLFLOW_VERSION="$(grep -oP '(?<=MLFLOW_VERSION=)[0-9.]+' "${{ env.IMAGE_NAME }}/Dockerfile")"
          DEBIAN_VERSION="$(grep -oP '(?<=DEBIAN_VERSION=)[0-9.]+' "${{ env.IMAGE_NAME }}/Dockerfile")"
          echo "MLFLOW_VERSION=$MLFLOW_VERSION" >> $GITHUB_ENV
          echo "DEBIAN_VERSION=$DEBIAN_VERSION" >> $GITHUB_ENV

    outputs:
      tag_base: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
      tag_end1: ${{ env.MLFLOW_VERSION }}
      tag_end2: ${{ env.MLFLOW_VERSION }}-debian${{ env.DEBIAN_VERSION }}
      context: "{{defaultContext}}:${{ env.IMAGE_NAME }}"
      labels: |
        org.opencontainers.image.source=${{ github.event.repository.html_url }}
        org.opencontainers.image.description=${{ github.event.repository.description }}
        org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}
        org.opencontainers.image.revision=${{ github.sha }}

  build-and-push-images:
    runs-on: ubuntu-latest
    needs: vars

    permissions:
      contents: read
      packages: write

    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: ${{ needs.vars.outputs.context }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: ${{ env.PLATFORMS }}
          push: true
          provenance: false
          labels: ${{ needs.vars.outputs.labels }}
          tags: |
            ${{ needs.vars.outputs.tag_base }}
            ${{ needs.vars.outputs.tag_base }}:${{ needs.vars.outputs.tag_end1 }}
            ${{ needs.vars.outputs.tag_base }}:${{ needs.vars.outputs.tag_end2 }}
