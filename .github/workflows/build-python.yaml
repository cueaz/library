name: Build and push images (python)

on:
  push:
    branches:
      - main
    paths:
      - python/**
  workflow_dispatch:

concurrency:
  group: python
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: python
  PLATFORMS: linux/amd64,linux/arm64

jobs:
  vars:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - run: |
          set -eux
          PYTHON_VERSION="$(grep -oP '(?<=PYTHON_VERSION=)[0-9.]+' "${{ env.IMAGE_NAME }}/Dockerfile")"
          DEBIAN_VERSION="$(grep -oP '(?<=DEBIAN_VERSION=)[0-9.]+' "${{ env.IMAGE_NAME }}/Dockerfile")"
          echo "PYTHON_VERSION=$PYTHON_VERSION" >> $GITHUB_ENV
          echo "DEBIAN_VERSION=$DEBIAN_VERSION" >> $GITHUB_ENV

    outputs:
      tag_base: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
      tag_end1: ${{ env.PYTHON_VERSION }}
      tag_end2: ${{ env.PYTHON_VERSION }}-debian${{ env.DEBIAN_VERSION }}
      context: "{{defaultContext}}:${{ env.IMAGE_NAME }}"
      labels: |
        org.opencontainers.image.source=${{ github.event.repository.html_url }}
        org.opencontainers.image.description=${{ github.event.repository.description }}
        org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}
        org.opencontainers.image.revision=${{ github.sha }}

  # ref: https://docs.docker.com/build/ci/github-actions/multi-platform/
  build-images:
    strategy:
      matrix:
        os: [ubuntu-24.04, ubuntu-24.04-arm]
      fail-fast: false

    runs-on: ${{ matrix.os }}

    needs: vars

    permissions:
      contents: read
      packages: write

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and check image (check)
        id: build
        uses: docker/build-push-action@v6
        with:
          target: check
          context: ${{ needs.vars.outputs.context }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          labels: ${{ needs.vars.outputs.labels }}
          outputs: type=image,"name=${{ needs.vars.outputs.tag_base }}",push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        id: export
        run: |
          set -eux
          echo "arch=$(dpkg --print-architecture)" >> $GITHUB_OUTPUT
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ steps.export.outputs.arch }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  push-images:
    runs-on: ubuntu-latest

    needs: [vars, build-images]

    permissions:
      contents: read
      packages: write

    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull image (check)
        working-directory: ${{ runner.temp }}/digests
        run: |
          set -eux
          for digest in *; do docker image pull "${{ needs.vars.outputs.tag_base }}@sha256:$digest"; done

      - name: Build and push image (latest)
        uses: docker/build-push-action@v6
        with:
          target: latest
          context: ${{ needs.vars.outputs.context }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: ${{ env.PLATFORMS }}
          push: true
          provenance: false
          labels: ${{ needs.vars.outputs.labels }}
          tags: |
            ${{ needs.vars.outputs.tag_base }}
            ${{ needs.vars.outputs.tag_base }}:${{ needs.vars.outputs.tag_end1 }}
            ${{ needs.vars.outputs.tag_base }}:${{ needs.vars.outputs.tag_end2 }}

      - name: Build and push image (debug)
        env:
          TARGET: debug
        uses: docker/build-push-action@v6
        with:
          target: ${{ env.TARGET }}
          context: ${{ needs.vars.outputs.context }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: ${{ env.PLATFORMS }}
          push: true
          provenance: false
          labels: ${{ needs.vars.outputs.labels }}
          tags: |
            ${{ needs.vars.outputs.tag_base }}:${{ env.TARGET }}
            ${{ needs.vars.outputs.tag_base }}:${{ needs.vars.outputs.tag_end1 }}-${{ env.TARGET }}
            ${{ needs.vars.outputs.tag_base }}:${{ needs.vars.outputs.tag_end2 }}-${{ env.TARGET }}

      - name: Build and push image (nonroot)
        env:
          TARGET: nonroot
        uses: docker/build-push-action@v6
        with:
          target: ${{ env.TARGET }}
          context: ${{ needs.vars.outputs.context }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: ${{ env.PLATFORMS }}
          push: true
          provenance: false
          labels: ${{ needs.vars.outputs.labels }}
          tags: |
            ${{ needs.vars.outputs.tag_base }}:${{ env.TARGET }}
            ${{ needs.vars.outputs.tag_base }}:${{ needs.vars.outputs.tag_end1 }}-${{ env.TARGET }}
            ${{ needs.vars.outputs.tag_base }}:${{ needs.vars.outputs.tag_end2 }}-${{ env.TARGET }}

      - name: Build and push image (debug-nonroot)
        env:
          TARGET: debug-nonroot
        uses: docker/build-push-action@v6
        with:
          target: ${{ env.TARGET }}
          context: ${{ needs.vars.outputs.context }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: ${{ env.PLATFORMS }}
          push: true
          provenance: false
          labels: ${{ needs.vars.outputs.labels }}
          tags: |
            ${{ needs.vars.outputs.tag_base }}:${{ env.TARGET }}
            ${{ needs.vars.outputs.tag_base }}:${{ needs.vars.outputs.tag_end1 }}-${{ env.TARGET }}
            ${{ needs.vars.outputs.tag_base }}:${{ needs.vars.outputs.tag_end2 }}-${{ env.TARGET }}
